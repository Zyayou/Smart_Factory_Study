################################################################################
# # 리스트
# # 여러개의 값을 일괄적으로 관리
# # 타 프로그래밍의 배열과 동일한 구조
# # 등록된 값의 개별 항목을 요소, 원소라고 한다.
################################################################################
# # 타입을 같이 뭉쳐서 나열하는 것이 좋은 코딩이긴 하지만
# # 다른 타입의 값도 수용한다.
# lists = [1, 2, '삼', True]

# # 반복문을 사용한 리스트 요소 추출
# lists = [10,20,30]
# for num in lists :
#     print(num, end="점 ")



# # 리스트의 범위 지정
# lists = [10,20,30,40,50,60,70,80]
# print(lists[0:2])    # 10 20
# print(lists[2:6:2])  # 30, 50



# # 리스트의 범위에 값을 할당
# lists = [10,20,30,40,50,60,70,80]
# lists[2:5] = [4, 5]
# print(lists)



# # 범위가 벗어나더라도 값을 할당
# lists = [10,20,30,40,50,60,70,80]
# lists[2:5] = [4,5,6,7,8,9,10] # 범위는 2개를 선택하였으나 데이터 요소를 7개 등록하는 경우 가능하다
# print(lists)





# # 범위 삭제
# lists = [10,20,30,40,50,60,70,80]
# lists[2:9] = []
# print(lists)




################################# 리스트 연산 ###########################################
# lists1 = ['일', '이', '삼']
# lists2 = [10,20,30,40,50,60,70,80]

# lists3 = lists1 +lists2
# print(lists3)  # 두개의 리스트의 요소를 하나의 리스트에 할당

# lists3 = lists1 * 3
# print(lists3)  # 곱한 횟수 만큼 리스트의 내용의 반복하여 요소로 할당





################################## 실습 ###############################################
# # 1. Score 리스트 에 실적 값 8개 를 저장 하고 총점 과 평균을 구해 출력 하세요
# Score = [85, 74, 55, 65, 89, 75, 98, 79]
# sum = 0
# for num in Score :
#     sum += num
# print("총점 : %d , 평균 : %.2f" % (sum, sum/8))



############################## 병원으로 인해 내용없음 pdf참조바람 ################################################


# # # 실습

# score = [ [80,90,100,90],  # 1번 학생 별 과목 점수
#           [70,90,100,50],  # 2번 학생 별 과목 점수
#           [80,80,80, 90]]  # 3번 학생 별 과목 점수



# # # 과목의 수 : 첫번째 학생을 기준으로 요소의 개수
# subject_count = len(score[0]) # 4 => 메인 for 문의 반복 횟수

# # # 과목 별 더해야 하는 학생의 수 
# student_CNT = len(score) # 3 

# # # 과목 별 총점
# sub_totalscore = 0

# # i : score 의 각요소 별 과목에 대한 index
# for i in range(subject_count) : # 0 ~ 3 subject_count : 4, 
#     for j in range(student_CNT) : # 0 ~ 2 학생 요소에 대한 index
#         # 과목 별 총점.
#         sub_totalscore = score[j][i]
#     print("{0} 번째 과목의 총점 : {1}, 평균 {2:.2f}"
#           .format((i + 1),sub_totalscore,sub_totalscore/student_CNT))
#     # # i 번째 과목에 대한 총 점 및 평균을 다 구한상태. 
#     sub_totalscore = 0


#####################################################################################################





################################################################################
# # 리스트 컴프리핸션
# # - 리스트의 요소가 일정한 규칙을 가진 수열일 경우
# #   간단한 인라인(한줄코드)으로 리스트의 내용을 할당하는 문법
################################################################################
# # 컴프리핸션의 기본 포멧
# nums = [n for n in range(1,11)]
# print(nums)

# # 컴프리핸션의 응용
# # 특정한 조건을 만족하는 경우만 리스트로 구성하고 싶을때
# nums = [n * 2 for n in range(1,11) if n % 2 == 0]
# print(nums)




################################################################################
# # 리스트에 데이터 삽입
################################################################################
# # insert 와 append
# nums = [n for n in range(1,11)]
# nums.append(5)
# print(nums)
# nums.insert(2,10) # 2 index위치에 10을 할당 
#                   # (1. 2이후 데이터 삭제, 2. 2위치에 10 할당, 3. 3위치부터 순차적으로 재배열)
# print(nums)





# # 리스트의 범위 지정 데이터 할당(삽입)
# nums = [n for n in range(1,11)]
# nums[2:2] = 10, 20 # 첫번째 범위에 해당요소를 삽입.
# print(nums)



# # extend() 원본 데이터에 추가적으로 리스트 내용을 덧붙이기 기능
# list1 = [1,2,3]
# list2 = [2,3,4]
# list1.extend(list2) # 원본리스트.extend(덧붙일 리스트)
# print(list1)


# list1 = [1,2,3]
# list2 = [2,3,4]
# print(list1 + list2) #원본에 관여안함
# print(list1)
# print(list2)




# # 리스트의 삭제
# num = [n * 2 for n in range(1,11) if n % 2 == 0]
# print(num)

# # 해당데이터를 삭제
# num.remove(4)
# print(num)

# # 해당인덱스를 삭제
# del num[2]
# print(num)

# # 리스트 범위 삭제
# num[:2] = []
# print(num)

# # 리스트의 데이터 일괄 삭제
# num = [n * 2 for n in range(1,11) if n % 2 == 0]
# print(num)

# num.clear()
# print(num)


#? 뭔가 놓침




################################################################################
# # 리스트의 내용을 삭제 후 반환 pop() (stack, Queue의 자료형 알고리즘이 적용되어있는 기능)
# # pop()
# # . 가장마지막에 등록된 데이터부터 추출 후 삭제
# # . 특정 index를 지칭 가능
################################################################################
# # pop()
# score = [10,20,30]
# score.pop()
# print(score)
# print(score.pop(0)) # 0 index 추출 후 삭제
# print(score)


# # 검색
# # 특정 값 찾기
# num = [n * 2 for n in range(1,11) if n % 2 == 0]
# find_num = num.index(8) # 해당 값이 있을 경우 인덱스를 반환 , 없을 경우 오류 반환
# print("8의 위치는 %d 위치에 있습니다." % find_num)
# num = [10,10,10,20,20,20,30,30,30]
# count_num = num.count(10)
# print("10의 개수는 %d개 입니다." % count_num)


# # 최댓값과 최솟값 찾기
# num = [n * 2 for n in range(1,11) if n % 2 == 0]
# print(max(num))
# print(min(num))



# # 리스트의 응용예제
# ans = input("얼마를 인출하시겠습니까?")
# result = ['천원', 1000, '일천원', '1,000']
# if ans in result :
#     print("인출에 성공하였습니다.")
# else :
#     print("인출하지 못하였습니다.")



# # 정렬 (데이터의 오름차순과 내림차순)
# num = [n * 2 for n in range(1,100) if n % 2 == 0]
# num.sort() #오름차순
# print(num) # 원본을 정렬
# num.reverse() #내림차순
# print(num)
# num.sort(reverse=True) 
# print(num)


# # 문자의 정렬
# values = [ 'korea', 'CHINA', 'america', 'japan']
# values.sort()
# print(values) # 대문자 우선


# # 대소문자 관계없이 정렬
# values.sort(key=str.lower)
# print(values)

# # 원본은 그대로 두고 정렬한 결과만 새로운 리스트로 생성
# # 후속로직에 원본의 데이터를 그대로 사용하여야 할 경우. (원본 복사 -> 정렬)
# values = [ 'korea', 'CHINA', 'america', 'japan']
# values2 = sorted(values)
# print(values)
# print(values2)




#######################################################################################
# # 실습
# # . 사용자로부터 5개이ㅡ 성적을 입력받아 리스트에 저장하고 오름차순으로 정렬후 출력
#######################################################################################
# score = []
# score.append(input("국어 성적을 입력해 주세요 : "))
# score.append(input("수학 성적을 입력해 주세요 : "))
# score.append(input("사회 성적을 입력해 주세요 : "))
# score.append(input("과학 성적을 입력해 주세요 : "))
# score.append(input("영어 성적을 입력해 주세요 : "))
# score.sort()
# print(score)