################################################################################
# # 반복문
# # 로직을 반복하여 수향한다.
# # for
# # 타 프로그래밍 언어의 foreach와 구동원리가 똑같음
################################################################################
# # 1씩 증가하는 수를 표현할 때
# print(1)
# print(2)
# print(3)
# print(4)
# #......
# print(100)

# # print()함수를 반복적으로 호출하는 로직을 반복문을 통하여 줄을 수 있다.
# # 파이썬 for 문의 range() : 정수 숫자의 범위를 지정해 주는 기능,
# # range(1, 101) : 1~100       1이상 100미만
# # range(101) : 0~100 
# for num in range(1,101) : 
#     print(num, ',' ,end=' ')
# print('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
# for num in range(101) : 
#     print(num, ',' ,end=' ')


# # 리스트 (컬렉션 : 특정 데이터들을 열거하여 관리한는 데이터 유형)
# lists = [1,2,7,5,6]
# for i in lists : 
#     print(i)


# for i in [1,2,3,4,5,6] : 
#     print(i)


###########################################################################################################
# # # 실습
# # # 1. 1 부터 100 사이의 수 중 짝수 만 표현하는 로직을 구현해 보세요
# for i in range(2, 101, 2) :
#     print(i, ',', end=' ')
# print()

# # # 2. 1부터 100 까지의 수 중 3 의 배수 인 숫자의 모든 합을 구하세요
# sum = 0
# for i in range(3, 101, 3) :
#     sum += i
# print(sum)







################################################################################
# # 반복문 강제 종료 Break
# # 다음순번 처리 Continue
# # 특정 조건에 따라 반복문을 제어 할 수 있다.
################################################################################
# sum = 0 # 정수값을 누적 변수
# for num in range(0, 101) :
#     if num > 30 and num < 40 :
#         continue
#     if num % 3 == 0:
#         sum += num    
#     elif num == 77 :
#         break
# print(sum)







################################################################################
# # 이중루브 (for in for)
# # 메인 for 에서 받아온 값을 기준으로 반복적으로 수행하는 로직을 구현 할 수 있다.
################################################################################
# # 구구단 만들기
# # > 단수 (dan) 변수를 2~9 까지 반복
# #   형수 (hang) 변수를 1~9 까지 반복
# #   각 단수 별로 행을 반복하여 곱한 값을 표현
# for dan in range(2, 10) :
#     print('\n', dan, '단 입니다.')
#     for hang in range(1,10) :
#         print(dan , '*', hang, '=',dan*hang)




# # tringle표현하기
# # 이중 for를 이용한 * 삼각형 그리기

# y : 피라미드의 행을 변화, 표현하는 변수
# for y in range(1, 10) : 
#     for i in range(y) :
#         print('*', end="")
#     print()


# #  위 로직은 아래처럼 간단히 구현할 수 있다.
# for y in range(1, 10) :
#     print('*' * y)







################################################################################
# # While
# # 특정 조건을 만족 시킬 때 로직을 수행한다.
################################################################################
# # 증가한 번호가 5 이하일 경우만 로직을 실행
# student = 1
# while student <= 5 :
#     print(student, "번 학생입니다.")
#     student += 1 # 반드시 루프를 종료 시킬 수 있는 조건의 변화가 필요하다.


# # # while의 continue와 break
# student = 1
# while student <= 20 :
#     print(student, "번 학생입니다.")
#     student += 1 # 반드시 루프를 종료 시킬 수 있는 조건의 변화가 필요하다.
#     if 10 < student <15 :
#         continue
#     elif student == 18 :
#         break

# # # 실습
# # # 11 번 부터 14 번 학생은 출력이 되지 않도록 하였으나 출력이 된 이유를 확인하고 원하는 결과 를 출력 할 수 있도록 수정 해 보세요
# # # while의 continue와 break
# student = 0
# while student <= 20 :
#     student += 1 # 반드시 루프를 종료 시킬 수 있는 조건의 변화가 필요하다.
#     if 10 < student <15 :
#         continue
#     elif student == 18 :
#         break
#     print(student, "번 학생입니다.")
    
# # # 다른답(더 효율적임)
# student = 0
# while student <= 20 :
#     student += 1 # 반드시 루프를 종료 시킬 수 있는 조건의 변화가 필요하다.
#     if 10 < student <15 :
#         student = 15 # 조건의 끝으로 감으로써 반복을 줄임
#         continue
#     elif student == 18 :
#         break
#     print(student, "번 학생입니다.")
    




    
################################################################################
# # 무한루프
# # 특정한 조건 없이는 끝나지 않고 반복하는 루프
################################################################################
# # 프로그램이 구동되고 있는 동안 현재 시간을 지속하여 1초단위로 표현하는 예제
# from datetime import datetime
# import time 

# while True : 
#     print(datetime.now())
#     time.sleep(1)



# # 특정 조건을 만족할 경우 무한루프를 빠져 나오는 로직을 구현
# # 종료해야하는 범위가 지정되어 있지 않는 프로세스의 종료를 구현하고자 할때 
# print('3+7=?')
# while True :
#     result = input("정답은? : ")
#     if (int(result) == 10) : break
# print("Good")






# # 1.  While 문을 사용하여 1 에서 200 까지 모든 3의 배수 를 모두 표현하고 누적 합계를 출력 하세요
# num = 3
# sum = 0
# while num <= 200 :
#     print(num, ",", end=" ")
#     sum += num
#     num += 3
# print("\n", sum)




# # 2. 오른쪽으로 치우친 별 표 삼각형을 그리는 로직을 구현 해 보세요
# n = 10
# for i in range(1, n) :
#     for j in range(1, n):
#         if j < n - i :
#             print(" ", end='')
#         else:
#             print("*", end='')
#     print()

# # 교수님 코드
# n = 10
# for i in range(1, n) :
#     print(' ' * (n-i-1), end='')
#     print('*' * i)



# # 3. 별 표 이등변삼각형을 그리는 로직을 구현 해 보세요
# n = 15 #아랫변 길이?
# for i in range(1, n//2+1) :
#     for j in range(1, n):
#         if j < n/2:
#             if j < n/2-i :
#                 print(" ", end='')
#             else : 
#                 print("*", end='')
#         else:
#             if j <= n/2+i-1 :
#                 print("*", end="")
#             else :
#                 print(" ", end='')
#     print()


# # 교수님 코드
# n = 10  # 행 갯수-1
# for i in range(1, n) :
#     print(" " * (n-i),end='')
#     print("*" * (i*2-1))



# # 4. 0 부터 9999 까지 의 수 중 6 이 들어가지 않은 수 의 개수를 구하세요
# num =0
# for i in range(10000) :
#     if "6" in str(i) :
#         continue
#     num += 1
# print(num)
    

# # 교수님 코드
# num =0
# for i in range(10000) :
#     if "6" not in str(i) :
#         num += 1
# print(num)
