################################################################################
# # 함수의 필요성
################################################################################
# 순차적인 정수를 누적 합산하는 값을 구하는 문제가 있다고 할때
# 아래와 같이 누적 합산 로직을 하나하나 작성하여 프로그래밍 할 수 있다. (틀린결과는 아님)
# sum = 1
# for num in range(5) :
#     sum += num
# print("~4 합은 : ",sum) #0~4까지 합

# sum = 1
# for num in range(6) :
#     sum += num
# print("~5 합은 : ",sum) #0~5까지 합

# sum = 1
# for num in range(7) :
#     sum += num
# print("~6 합은 : ",sum) #0~6까지 합

# sum = 1
# for num in range(8) :
#     sum += num
# print("~7 합은 : ",sum) #0~7까지 합


# # 만약 누적 합산이 아닌 누적 곱이라고 할때
# # 모든 로직을 수정해야 한다. (유지 보수성이 떨어진다.)

# sum = 1
# for num in range(5) :
#     sum *= num
# print("~4 합은 : ",sum) 

# sum = 1
# for num in range(6) :
#     sum *= num
# print("~5 합은 : ",sum) 

# sum = 1
# for num in range(7) :
#     sum *= num
# print("~6 합은 : ",sum) 

# sum = 1
# for num in range(8) :
#     sum += num # 만약 누락할 경우 원하는 값을 얻지 못함
# print("~7 합은 : ",sum)

# 1~ 100까지의 모든 합을 표현하는 로직을 구현할때 100번의 반복되는 로직을 모두 작성해야한다.(반복성)





################################################################################
# # 함수 (재사용성과 유지보수성의 증가)
# # . 반복적인 코드를 작성해 두고 언제든지 재사용 할 수 있도록 할 수 있다.
# # . 함수의 내용을 수정 시 함수를 호출하는 모든 구문의 내용이 일괄 수정된다.
################################################################################
# # 함수의 생성 def
# def MyFuction() :
#     print("안녕하세요")

# # # 함수의 호출
# MyFuction()


# # 함수의 인수와 인자. (아!수주 받자매파)
# # 함수로 전달하는 값 : 인수
# # 함수가 전달받기로 약속한 값 : 인자
# def MyFuction(param) :
#     print(param)

# MyFuction("안녕하세요")
# MyFuction(500)



# # 잘못된 함수의 호출
#  def MyFuction(param) :
#     print(param)

# MyFuction()







################################################################################
# # 위의 예시에서 반복되는 구문 함수로 바꾸기
################################################################################
# def MyFuction(ivalue) :
#     sum = 0
#     for num in range(ivalue+1) :
#         sum += num
#     print("~", ivalue ,"합은 :",sum)

# # i : 함수를 실행할때 더해저야하는 정수 
# for i in range(5, 9):
#     MyFuction(i)



################################################################################
# # 실습...?
################################################################################
# def MyFuction(ivalue) :
#     sum = 0
#     for num in range(ivalue+1) :
#         sum += num
#     print("~", ivalue ,"합은 :",sum)

# # i : 함수를 실행할때 더해저야하는 정수 
# for i in range(5, 9):
#     MyFuction(i)



# # 함수의 내용읠 수정할 경우 호출하는 모든 결과를 일괄 수정할 수 있다. (유지보수성)
# def MyFuction(ivalue) :
#     sum = 0
#     for num in range(ivalue+1) :
#         sum *= num
#     print("~", ivalue ,"합은 :",sum)

# # i : 함수를 실행할때 더해저야하는 정수 
# for i in range(5, 101):
#     MyFuction(i)











################################################################################
# # 함수의 결과를 반환하는 return 
# # 파이썬의 경우 함수 변환 데이터 유형을 지정하지 않아도 유동적으로 데이터를 함수를 호출한 곳으로 반환할 수 있다.
################################################################################
# # 함수의 결과를 호출한 곳으로 반환함으로 결과값으로 로직을 이어서 구현하기 위함
# def calsum(end) : 
#     sum = 0
#     for i in range (end+1) :
#         sum += i
#     return sum
# print('합은', calsum(10), '입니다.')





#######################################
# ㅈㄹ아니렁하;ㄴㅋ리ㅏㅜ나어ㅣㅏ;리
# 집중ㅇ아니ㅓ해ㅑㅓㅐㅏ리어ㅏ함;ㄴㅇ



# # 인자를 n개 생성할 수 있다.

#######################################


# # 로직을 완성하지 않았지만 미완성 로직으로 인해 오류를 내고 싶지 않을때
# # 인터프리터 언어( 프로그램을 실행 할 때 비로소 오류)
for i in range(10) :
    pass

def MyFuction():
    pass



################################################################################
# # 실습
################################################################################
# # 1.  . 정수로 시작 과 끝의 범위 와 몇배수 인지 의 정보를 인자로 받는 함수 를 작성하여 시작 과 끝 범위 내에 있는 배수 를 모두 표현하는 로직을 구현해 보세요.
# def findnum(r, s, e):
#     strnum=""
#     for i in range(s, e+1) : 
#         if(i % r == 0) :
#             strnum += str(i)
#             strnum += ", "
#     return strnum

# startn = int(input("시작 정수값 : "))
# endn   = int(input("종료 정수값 : "))
# r      = int(input("찾을 배수 : "))
# print(r, "배수의 결과 :", findnum(r, startn, endn))



################################################################################
# # 재귀 호출
# # . 자기 자신을 반복적으로 호출하도록 구현된 함수
# # . 코드가 간결해지고 가독성이 높아진다.
# # . 일반적인 로직보다 실행하는데 시간이 오래 걸릴 수 있다.
# # . 반드시 종료하는 시점의 값을 리턴하는 부분이 필요하다.
################################################################################
# def factorial(n) :
#     if n == 0 :
#         return 1
#     else :
#         return n * factorial( n-1 )
# result = factorial(5)
# print(result)
